name: Scheduled Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PHP_VERSION: 8.1
  NODE_VERSION: '20'
  COMPOSER_PROCESS_TIMEOUT: 0

jobs:
  # Check for dependency updates
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check Composer updates
        run: |
          composer install
          composer outdated --direct > composer-outdated.txt || true

          if [ -s composer-outdated.txt ]; then
            echo "COMPOSER_UPDATES=true" >> $GITHUB_ENV
            echo "Composer packages with updates available:"
            cat composer-outdated.txt
          fi

      - name: Check NPM updates
        run: |
          npm install
          npm outdated > npm-outdated.txt || true

          if [ -s npm-outdated.txt ]; then
            echo "NPM_UPDATES=true" >> $GITHUB_ENV
            echo "NPM packages with updates available:"
            cat npm-outdated.txt
          fi

      - name: Check WordPress core updates
        run: |
          # Check if newer WordPress version is available
          CURRENT_WP=$(grep 'johnpbloch/wordpress-core' composer.json | grep -o '[0-9]\+\.[0-9]\+')
          LATEST_WP=$(curl -s https://api.wordpress.org/core/version-check/1.7/ | jq -r '.offers[0].version')

          if [ "$CURRENT_WP" != "$LATEST_WP" ]; then
            echo "WORDPRESS_UPDATE=true" >> $GITHUB_ENV
            echo "WordPress update available: $CURRENT_WP -> $LATEST_WP"
          fi

      - name: Create update issue
        uses: actions/github-script@v6
        if: env.COMPOSER_UPDATES == 'true' || env.NPM_UPDATES == 'true' || env.WORDPRESS_UPDATE == 'true'
        with:
          script: |
            const fs = require('fs');

            let body = '## 🔄 Dependency Updates Available\n\n';
            body += 'The following dependencies have updates available:\n\n';

            if (process.env.COMPOSER_UPDATES === 'true') {
              body += '### Composer Packages\n';
              body += '```\n';
              try {
                body += fs.readFileSync('composer-outdated.txt', 'utf8');
              } catch (e) {}
              body += '\n```\n\n';
            }

            if (process.env.NPM_UPDATES === 'true') {
              body += '### NPM Packages\n';
              body += '```\n';
              try {
                body += fs.readFileSync('npm-outdated.txt', 'utf8');
              } catch (e) {}
              body += '\n```\n\n';
            }

            if (process.env.WORDPRESS_UPDATE === 'true') {
              body += '### WordPress Core\n';
              body += '🔴 WordPress core update is available\n\n';
            }

            body += '### Next Steps\n';
            body += '1. Review the updates for breaking changes\n';
            body += '2. Update dependencies in a feature branch\n';
            body += '3. Run tests to ensure compatibility\n';
            body += '4. Create PR with the updates\n\n';
            body += '> This issue was automatically created by the maintenance workflow.';

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 Dependency updates available - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['maintenance', 'dependencies']
            });

  # Security vulnerability scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install Composer dependencies
        run: composer install

      - name: Run Composer security audit
        run: |
          composer audit --format=json > composer-audit.json || true

          if [ -s composer-audit.json ] && [ "$(cat composer-audit.json)" != "[]" ]; then
            echo "COMPOSER_VULNERABILITIES=true" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install NPM dependencies
        run: |
          # Try npm ci first, fallback to npm install if lock file is out of sync
          npm ci || npm install

      - name: Run NPM security audit
        run: |
          npm audit --json > npm-audit.json || true

          if [ -s npm-audit.json ]; then
            VULNERABILITIES=$(cat npm-audit.json | jq -r '.metadata.vulnerabilities.total // 0')
            if [ "$VULNERABILITIES" -gt "0" ]; then
              echo "NPM_VULNERABILITIES=true" >> $GITHUB_ENV
            fi
          fi

      - name: Create security issue
        uses: actions/github-script@v6
        if: env.COMPOSER_VULNERABILITIES == 'true' || env.NPM_VULNERABILITIES == 'true'
        with:
          script: |
            const fs = require('fs');

            let body = '## 🚨 Security Vulnerabilities Detected\n\n';
            body += '**Priority: HIGH** - Please address these vulnerabilities as soon as possible.\n\n';

            if (process.env.COMPOSER_VULNERABILITIES === 'true') {
              body += '### Composer Vulnerabilities\n';
              body += '```json\n';
              try {
                body += fs.readFileSync('composer-audit.json', 'utf8');
              } catch (e) {}
              body += '\n```\n\n';
            }

            if (process.env.NPM_VULNERABILITIES === 'true') {
              body += '### NPM Vulnerabilities\n';
              body += '```json\n';
              try {
                const audit = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));
                body += JSON.stringify(audit.vulnerabilities, null, 2);
              } catch (e) {}
              body += '\n```\n\n';
            }

            body += '### Action Required\n';
            body += '1. 🔍 Review the vulnerabilities above\n';
            body += '2. 🔧 Update affected packages\n';
            body += '3. 🧪 Run tests to ensure compatibility\n';
            body += '4. 🚀 Deploy fixes immediately\n\n';
            body += '> This issue was automatically created by the security scan workflow.';

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 SECURITY: Vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['security', 'bug', 'priority-high']
            });

  # Cleanup old artifacts and caches
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old workflow runs
        uses: actions/github-script@v6
        with:
          script: |
            // Delete workflow runs older than 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            for (const workflow of workflows.workflows) {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                per_page: 100
              });

              for (const run of runs.workflow_runs) {
                const runDate = new Date(run.created_at);
                if (runDate < thirtyDaysAgo && run.conclusion !== null) {
                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      run_id: run.id
                    });
                    console.log(`Deleted old workflow run: ${run.id}`);
                  } catch (error) {
                    console.log(`Failed to delete run ${run.id}: ${error.message}`);
                  }
                }
              }
            }

      - name: Report cleanup completion
        run: echo "✅ Cleanup completed successfully"
