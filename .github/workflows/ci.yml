name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'
  WORDPRESS_VERSION: 'latest'

jobs:
  validate:
    name: Code Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install Composer dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

      - name: Install NPM dependencies
        run: npm ci

      - name: PHP Code Standards
        run: composer run analyze

      - name: JavaScript/TypeScript Linting
        run: npm run lint:js

      - name: CSS/SCSS Linting
        run: npm run lint:css

      - name: Markdown Linting
        run: npm run lint:md

      - name: YAML Linting
        run: npm run lint:yaml

      - name: Prettier Format Check
        run: npm run format:check

      - name: Security audit (Composer)
        run: composer audit --no-dev || true

      - name: Security audit (NPM)
        run: npm audit --audit-level=moderate || true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !inputs.skip_tests }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install dependencies
        run: |
          composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader
          npm ci

      - name: Setup WordPress test environment
        run: |
          bash scripts/wp-install.sh wordpress_test root root localhost ${{ env.WORDPRESS_VERSION }}

      - name: Run PHP unit tests
        run: composer run test:unit

      - name: Run integration tests
        run: composer run test:integration

      - name: JavaScript unit tests
        run: npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            coverage/
            tests/test-results/

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    environment: ${{ inputs.environment || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install and build
        run: |
          composer install --no-dev --optimize-autoloader
          npm ci
          npm run build

      - name: Deploy to staging
        if: ${{ (inputs.environment == 'staging' || !inputs.environment) && github.ref == 'refs/heads/main' }}
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment commands here

      - name: Deploy to production
        if: ${{ inputs.environment == 'production' && github.event_name == 'workflow_dispatch' }}
        run: |
          echo "Deploying to production environment"
          # Add your production deployment commands here

      - name: Health check
        run: |
          echo "Running post-deployment health checks"
          # Add health check commands here

  e2e-full:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Start application
        run: |
          # Start your application for E2E testing
          npm start &
          sleep 30

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload E2E videos
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-videos
          path: test-results/
