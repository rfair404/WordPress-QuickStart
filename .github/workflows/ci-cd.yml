name: WordPress Quickstart CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  PHP_VERSION: "8.1"
  NODE_VERSION: "18"
  COMPOSER_CACHE_KEY: composer-cache-v1

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ env.COMPOSER_CACHE_KEY }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.COMPOSER_CACHE_KEY }}-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: Setup PHP CodeSniffer standards
        run: composer run setup:standards

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install NPM dependencies
        run: npm install --legacy-peer-deps

      - name: Run PHP Code Sniffer
        run: composer run lint

      - name: Run ESLint
        run: npm run lint:js

      - name: Run Prettier Check
        run: npm run format:check

      - name: Validate Composer
        run: composer validate --strict

      - name: Check PHP syntax
        run: find . -name "*.php" -not -path "./vendor/*" -not -path "./wp/*" -exec php -l {} \;

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        php-version: ["8.1", "8.2", "8.3"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ env.COMPOSER_CACHE_KEY }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.COMPOSER_CACHE_KEY }}-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Setup WordPress for testing
        run: |
          # Create wp-config.php for testing
          php scripts/wp-config-generator.php
          # Create test directories
          mkdir -p custom/plugins custom/themes custom/uploads
          # Make wp-manager.sh executable
          chmod +x scripts/wp-manager.sh
        env:
          WP_ENV: testing

      - name: Run PHPUnit tests
        run: composer run test

      - name: Run WordPress installation tests
        run: composer run test:wordpress

      - name: Generate test coverage
        if: matrix.php-version == '8.1'
        run: composer run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.php-version == '8.1'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/clover.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: WordPress Installation Validation
  wordpress-validation:
    name: WordPress Installation Validation
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: wordpress
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wordpress
          MYSQL_PASSWORD: wordpress
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Create WordPress directory structure
        run: |
          mkdir -p wp
          mkdir -p custom/plugins
          mkdir -p custom/themes
          mkdir -p custom/uploads

      - name: Setup WordPress for testing
        run: |
          # Generate WordPress configuration for testing
          php scripts/wp-config-generator.php
          # Make wp-manager.sh executable
          chmod +x scripts/wp-manager.sh
        env:
          WP_ENV: testing
          DB_NAME: wordpress
          DB_USER: wordpress
          DB_PASSWORD: wordpress
          DB_HOST: 127.0.0.1:3306

      - name: Validate WordPress installation structure
        run: bash tests/validation/validate-wordpress-installation.sh

      - name: Run project setup validation
        run: bash tests/test-project-setup.sh

      - name: Validate WooCommerce setup
        run: bash tests/validation/validate-woocommerce-setup.sh

  # Job 4: E2E Tests with Playwright
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, wordpress-validation]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install NPM dependencies
        run: npm install --legacy-peer-deps

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Start WordPress development server
        run: |
          # Install WordPress for E2E testing
          composer install
          php scripts/wp-config-generator.php
          mkdir -p custom/plugins custom/themes custom/uploads
          # Start PHP built-in server for testing
          cd wp && php -S localhost:8000 -t . &
          sleep 5
        env:
          WP_ENV: testing

      - name: Run Playwright E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: tests/playwright-report/
          retention-days: 30

  # Job 5: Comprehensive Test Suite
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [unit-tests, wordpress-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Setup PHP CodeSniffer standards
        run: composer run setup:standards

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install NPM dependencies
        run: npm install --legacy-peer-deps

      - name: Run comprehensive analysis
        run: composer run analyze

      - name: Make test scripts executable
        run: find tests -name "*.sh" -type f -exec chmod +x {} \;

      - name: Run validation tests
        run: bash tests/test-suite.sh validate

      - name: Run analysis tests
        run: bash tests/test-suite.sh analyze

      - name: Run unit test analysis
        run: bash tests/analysis/analyze-unit-tests.sh

  # Job 6: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Run Composer security audit
        run: composer audit

      - name: Run NPM security audit
        run: npm audit --audit-level high

      - name: Setup Node.js for security scanning
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install NPM dependencies
        run: npm install --legacy-peer-deps

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 7: Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests, wordpress-validation, comprehensive-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          composer install --no-dev --prefer-dist --no-progress --no-suggest --optimize-autoloader
          npm install --legacy-peer-deps

      # NOTE: Build step removed - Phase 2 uses direct file serving
      # WordPress serves files directly, no webpack build needed

      - name: Create deployment package
        run: |
          mkdir -p build
          # Copy necessary files excluding development dependencies
          rsync -av --exclude-from=.gitignore \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='tests' \
            --exclude='docs' \
            --exclude='.github' \
            --exclude='build' \
            . build/

      - name: Create deployment archive
        run: |
          cd build
          tar -czf ../wordpress-quickstart-${{ github.sha }}.tar.gz .
          cd ..

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: wordpress-quickstart-${{ github.sha }}
          path: wordpress-quickstart-${{ github.sha }}.tar.gz
          retention-days: 90

  # Job 7: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.staging-url }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: wordpress-quickstart-${{ github.sha }}

      - name: Deploy to staging server
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          echo "staging-url=https://staging.your-domain.com" >> $GITHUB_OUTPUT
          # Add your staging deployment logic here
          # This could include:
          # - Uploading to staging server
          # - Running database migrations
          # - Installing WordPress and plugins
          # - Running post-deployment tests

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke tests for staging environment

  # Job 8: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.production-url }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: wordpress-quickstart-${{ github.sha }}

      - name: Deploy to production server
        id: deploy
        run: |
          echo "Deploying to production environment..."
          echo "production-url=https://your-domain.com" >> $GITHUB_OUTPUT
          # Add your production deployment logic here

      - name: Run production smoke tests
        run: |
          echo "Running smoke tests on production..."
          # Add smoke tests for production environment

  # Job 9: Notification
  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful"
          fi
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Production deployment successful"
          fi
          # Add Slack/email/Discord notifications here
